{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "aabb0e4d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-23T07:47:50.579803Z",
     "iopub.status.busy": "2024-06-23T07:47:50.579392Z",
     "iopub.status.idle": "2024-06-23T07:47:53.428898Z",
     "shell.execute_reply": "2024-06-23T07:47:53.427850Z"
    },
    "papermill": {
     "duration": 2.859044,
     "end_time": "2024-06-23T07:47:53.431868",
     "exception": false,
     "start_time": "2024-06-23T07:47:50.572824",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n",
    "\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "\n",
    "from sklearn.neural_network import BernoulliRBM\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "\n",
    "from sklearn import datasets\n",
    "from sklearn.metrics import accuracy_score, classification_report\n",
    "\n",
    "from sklearn.tree import DecisionTreeClassifier\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4cec92c0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-23T07:47:53.443008Z",
     "iopub.status.busy": "2024-06-23T07:47:53.442466Z",
     "iopub.status.idle": "2024-06-23T07:47:53.887714Z",
     "shell.execute_reply": "2024-06-23T07:47:53.886560Z"
    },
    "papermill": {
     "duration": 0.453811,
     "end_time": "2024-06-23T07:47:53.890470",
     "exception": false,
     "start_time": "2024-06-23T07:47:53.436659",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# importing CSV with training data\n",
    "file_path = '/kaggle/input/playground-series-s4e6/train.csv'\n",
    "    # Read the CSV file into a DataFrame\n",
    "df = pd.read_csv(file_path)\n",
    "\n",
    "X=df.copy()\n",
    "\n",
    "X.drop(columns=['Target'],inplace=True)\n",
    "\n",
    "y=df[['Target']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "182274b3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-23T07:47:53.901862Z",
     "iopub.status.busy": "2024-06-23T07:47:53.900912Z",
     "iopub.status.idle": "2024-06-23T07:47:53.906508Z",
     "shell.execute_reply": "2024-06-23T07:47:53.905211Z"
    },
    "papermill": {
     "duration": 0.013712,
     "end_time": "2024-06-23T07:47:53.908819",
     "exception": false,
     "start_time": "2024-06-23T07:47:53.895107",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "y_original= y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0296b079",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-23T07:47:53.920041Z",
     "iopub.status.busy": "2024-06-23T07:47:53.919651Z",
     "iopub.status.idle": "2024-06-23T07:47:53.991943Z",
     "shell.execute_reply": "2024-06-23T07:47:53.990963Z"
    },
    "papermill": {
     "duration": 0.081724,
     "end_time": "2024-06-23T07:47:53.995206",
     "exception": false,
     "start_time": "2024-06-23T07:47:53.913482",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_18/2160502187.py:3: FutureWarning: Downcasting behavior in `replace` is deprecated and will be removed in a future version. To retain the old behavior, explicitly call `result.infer_objects(copy=False)`. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`\n",
      "  y=y['Target'].replace(y_distionary)\n"
     ]
    }
   ],
   "source": [
    "y_distionary={'Graduate' : 1, 'Dropout':2 , 'Enrolled':3}\n",
    "\n",
    "y=y['Target'].replace(y_distionary)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "393e7794",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-23T07:47:54.006930Z",
     "iopub.status.busy": "2024-06-23T07:47:54.006570Z",
     "iopub.status.idle": "2024-06-23T07:47:54.016764Z",
     "shell.execute_reply": "2024-06-23T07:47:54.015732Z"
    },
    "papermill": {
     "duration": 0.019237,
     "end_time": "2024-06-23T07:47:54.019347",
     "exception": false,
     "start_time": "2024-06-23T07:47:54.000110",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "colname = ['id','Previous qualification','Previous qualification (grade)','Debtor','Tuition fees up to date','Gender','Scholarship holder','Age at enrollment','Nacionality','Mother\\'s qualification','Father\\'s qualification','Mother\\'s occupation','Father\\'s occupation','Educational special needs','International','Curricular units 1st sem (credited)','Curricular units 1st sem (enrolled)','Curricular units 1st sem (evaluations)','Curricular units 1st sem (approved)','Curricular units 1st sem (grade)','Curricular units 1st sem (without evaluations)','Curricular units 2nd sem (credited)','Curricular units 2nd sem (enrolled)','Curricular units 2nd sem (evaluations)','Curricular units 2nd sem (approved)','Curricular units 2nd sem (grade)','Curricular units 2nd sem (without evaluations)','Unemployment rate']\n",
    "X_original=X\n",
    "\n",
    "# Create a DataFrame for polynomial features to easily identify the original features\n",
    "X = pd.DataFrame(X, columns=colname)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "767b2140",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-23T07:47:54.030778Z",
     "iopub.status.busy": "2024-06-23T07:47:54.030385Z",
     "iopub.status.idle": "2024-06-23T07:47:54.073531Z",
     "shell.execute_reply": "2024-06-23T07:47:54.072352Z"
    },
    "papermill": {
     "duration": 0.052068,
     "end_time": "2024-06-23T07:47:54.076324",
     "exception": false,
     "start_time": "2024-06-23T07:47:54.024256",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#splitting the data into training data and test data ( aorund 20% of data will be used for testing the results whereas 80% for training the model)\n",
    "\n",
    "#X_train contains training data\n",
    "# y_train cotains result set for training data  ( both X_train and y_train will train the model)\n",
    "# X_test contains the test data\n",
    "# y_test contains test expected Results\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "#X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n",
    "\n",
    "X_train_original=X_train\n",
    "X_test_original=X_test\n",
    "y_train_original=y_train\n",
    "y_test_original=y_test\n",
    "\n",
    "\n",
    "X_train=X_train.drop(columns=['id'])\n",
    "X_test=X_test.drop(columns=['id'])\n",
    "#scaler = StandardScaler()\n",
    "#X_train = scaler.fit_transform(X_train)\n",
    "#X_test = scaler.transform(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "9277fb90",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-23T07:47:54.088385Z",
     "iopub.status.busy": "2024-06-23T07:47:54.087982Z",
     "iopub.status.idle": "2024-06-23T07:47:54.143516Z",
     "shell.execute_reply": "2024-06-23T07:47:54.142384Z"
    },
    "papermill": {
     "duration": 0.065101,
     "end_time": "2024-06-23T07:47:54.146501",
     "exception": false,
     "start_time": "2024-06-23T07:47:54.081400",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>Previous qualification</th>\n",
       "      <th>Previous qualification (grade)</th>\n",
       "      <th>Debtor</th>\n",
       "      <th>Tuition fees up to date</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Scholarship holder</th>\n",
       "      <th>Age at enrollment</th>\n",
       "      <th>Nacionality</th>\n",
       "      <th>Mother's qualification</th>\n",
       "      <th>...</th>\n",
       "      <th>Curricular units 1st sem (approved)</th>\n",
       "      <th>Curricular units 1st sem (grade)</th>\n",
       "      <th>Curricular units 1st sem (without evaluations)</th>\n",
       "      <th>Curricular units 2nd sem (credited)</th>\n",
       "      <th>Curricular units 2nd sem (enrolled)</th>\n",
       "      <th>Curricular units 2nd sem (evaluations)</th>\n",
       "      <th>Curricular units 2nd sem (approved)</th>\n",
       "      <th>Curricular units 2nd sem (grade)</th>\n",
       "      <th>Curricular units 2nd sem (without evaluations)</th>\n",
       "      <th>Unemployment rate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>12065</th>\n",
       "      <td>12065</td>\n",
       "      <td>39</td>\n",
       "      <td>150.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>21</td>\n",
       "      <td>1</td>\n",
       "      <td>37</td>\n",
       "      <td>...</td>\n",
       "      <td>6</td>\n",
       "      <td>12.666667</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>21</td>\n",
       "      <td>5</td>\n",
       "      <td>12.777778</td>\n",
       "      <td>0</td>\n",
       "      <td>16.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17210</th>\n",
       "      <td>17210</td>\n",
       "      <td>1</td>\n",
       "      <td>127.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>20</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>3</td>\n",
       "      <td>11.666667</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>12</td>\n",
       "      <td>3</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>15.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60954</th>\n",
       "      <td>60954</td>\n",
       "      <td>1</td>\n",
       "      <td>140.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>19</td>\n",
       "      <td>1</td>\n",
       "      <td>37</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>11.500000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>12.200000</td>\n",
       "      <td>0</td>\n",
       "      <td>7.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2322</th>\n",
       "      <td>2322</td>\n",
       "      <td>1</td>\n",
       "      <td>110.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>1</td>\n",
       "      <td>19</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>12.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>374</th>\n",
       "      <td>374</td>\n",
       "      <td>19</td>\n",
       "      <td>133.1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>27</td>\n",
       "      <td>1</td>\n",
       "      <td>34</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>13</td>\n",
       "      <td>1</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>9.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37194</th>\n",
       "      <td>37194</td>\n",
       "      <td>1</td>\n",
       "      <td>126.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>20</td>\n",
       "      <td>1</td>\n",
       "      <td>38</td>\n",
       "      <td>...</td>\n",
       "      <td>7</td>\n",
       "      <td>12.785714</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>9</td>\n",
       "      <td>8</td>\n",
       "      <td>13.750000</td>\n",
       "      <td>0</td>\n",
       "      <td>16.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6265</th>\n",
       "      <td>6265</td>\n",
       "      <td>1</td>\n",
       "      <td>130.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>19</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>3</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>10</td>\n",
       "      <td>4</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>16.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54886</th>\n",
       "      <td>54886</td>\n",
       "      <td>1</td>\n",
       "      <td>150.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>5</td>\n",
       "      <td>12.400000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>11</td>\n",
       "      <td>5</td>\n",
       "      <td>12.857143</td>\n",
       "      <td>0</td>\n",
       "      <td>13.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>860</th>\n",
       "      <td>860</td>\n",
       "      <td>1</td>\n",
       "      <td>133.1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>35</td>\n",
       "      <td>1</td>\n",
       "      <td>37</td>\n",
       "      <td>...</td>\n",
       "      <td>6</td>\n",
       "      <td>12.500000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>13.333333</td>\n",
       "      <td>0</td>\n",
       "      <td>15.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15795</th>\n",
       "      <td>15795</td>\n",
       "      <td>1</td>\n",
       "      <td>160.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>19</td>\n",
       "      <td>1</td>\n",
       "      <td>19</td>\n",
       "      <td>...</td>\n",
       "      <td>5</td>\n",
       "      <td>11.800000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>9</td>\n",
       "      <td>4</td>\n",
       "      <td>13.400000</td>\n",
       "      <td>0</td>\n",
       "      <td>10.8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>61214 rows × 28 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          id  Previous qualification  Previous qualification (grade)  Debtor  \\\n",
       "12065  12065                      39                           150.0       0   \n",
       "17210  17210                       1                           127.0       0   \n",
       "60954  60954                       1                           140.0       0   \n",
       "2322    2322                       1                           110.0       0   \n",
       "374      374                      19                           133.1       0   \n",
       "...      ...                     ...                             ...     ...   \n",
       "37194  37194                       1                           126.0       0   \n",
       "6265    6265                       1                           130.0       0   \n",
       "54886  54886                       1                           150.0       0   \n",
       "860      860                       1                           133.1       0   \n",
       "15795  15795                       1                           160.0       0   \n",
       "\n",
       "       Tuition fees up to date  Gender  Scholarship holder  Age at enrollment  \\\n",
       "12065                        1       0                   1                 21   \n",
       "17210                        1       1                   0                 20   \n",
       "60954                        1       0                   1                 19   \n",
       "2322                         1       1                   0                 18   \n",
       "374                          1       1                   0                 27   \n",
       "...                        ...     ...                 ...                ...   \n",
       "37194                        1       0                   1                 20   \n",
       "6265                         1       0                   0                 19   \n",
       "54886                        1       0                   0                 18   \n",
       "860                          1       0                   0                 35   \n",
       "15795                        1       0                   1                 19   \n",
       "\n",
       "       Nacionality  Mother's qualification  ...  \\\n",
       "12065            1                      37  ...   \n",
       "17210            1                       1  ...   \n",
       "60954            1                      37  ...   \n",
       "2322             1                      19  ...   \n",
       "374              1                      34  ...   \n",
       "...            ...                     ...  ...   \n",
       "37194            1                      38  ...   \n",
       "6265             1                       1  ...   \n",
       "54886            1                       2  ...   \n",
       "860              1                      37  ...   \n",
       "15795            1                      19  ...   \n",
       "\n",
       "       Curricular units 1st sem (approved)  Curricular units 1st sem (grade)  \\\n",
       "12065                                    6                         12.666667   \n",
       "17210                                    3                         11.666667   \n",
       "60954                                    4                         11.500000   \n",
       "2322                                     0                          0.000000   \n",
       "374                                      0                          0.000000   \n",
       "...                                    ...                               ...   \n",
       "37194                                    7                         12.785714   \n",
       "6265                                     3                         12.000000   \n",
       "54886                                    5                         12.400000   \n",
       "860                                      6                         12.500000   \n",
       "15795                                    5                         11.800000   \n",
       "\n",
       "       Curricular units 1st sem (without evaluations)  \\\n",
       "12065                                               0   \n",
       "17210                                               0   \n",
       "60954                                               0   \n",
       "2322                                                0   \n",
       "374                                                 0   \n",
       "...                                               ...   \n",
       "37194                                               0   \n",
       "6265                                                0   \n",
       "54886                                               0   \n",
       "860                                                 0   \n",
       "15795                                               0   \n",
       "\n",
       "       Curricular units 2nd sem (credited)  \\\n",
       "12065                                    1   \n",
       "17210                                    0   \n",
       "60954                                    0   \n",
       "2322                                     0   \n",
       "374                                      0   \n",
       "...                                    ...   \n",
       "37194                                    0   \n",
       "6265                                     0   \n",
       "54886                                    0   \n",
       "860                                      0   \n",
       "15795                                    0   \n",
       "\n",
       "       Curricular units 2nd sem (enrolled)  \\\n",
       "12065                                    6   \n",
       "17210                                    6   \n",
       "60954                                    6   \n",
       "2322                                     0   \n",
       "374                                      6   \n",
       "...                                    ...   \n",
       "37194                                    8   \n",
       "6265                                     5   \n",
       "54886                                    6   \n",
       "860                                      6   \n",
       "15795                                    5   \n",
       "\n",
       "       Curricular units 2nd sem (evaluations)  \\\n",
       "12065                                      21   \n",
       "17210                                      12   \n",
       "60954                                       6   \n",
       "2322                                        0   \n",
       "374                                        13   \n",
       "...                                       ...   \n",
       "37194                                       9   \n",
       "6265                                       10   \n",
       "54886                                      11   \n",
       "860                                         6   \n",
       "15795                                       9   \n",
       "\n",
       "       Curricular units 2nd sem (approved)  Curricular units 2nd sem (grade)  \\\n",
       "12065                                    5                         12.777778   \n",
       "17210                                    3                         11.000000   \n",
       "60954                                    5                         12.200000   \n",
       "2322                                     0                          0.000000   \n",
       "374                                      1                         11.000000   \n",
       "...                                    ...                               ...   \n",
       "37194                                    8                         13.750000   \n",
       "6265                                     4                         12.000000   \n",
       "54886                                    5                         12.857143   \n",
       "860                                      6                         13.333333   \n",
       "15795                                    4                         13.400000   \n",
       "\n",
       "       Curricular units 2nd sem (without evaluations)  Unemployment rate  \n",
       "12065                                               0               16.2  \n",
       "17210                                               0               15.5  \n",
       "60954                                               0                7.6  \n",
       "2322                                                0               12.4  \n",
       "374                                                 0                9.4  \n",
       "...                                               ...                ...  \n",
       "37194                                               0               16.2  \n",
       "6265                                                0               16.2  \n",
       "54886                                               0               13.9  \n",
       "860                                                 0               15.5  \n",
       "15795                                               0               10.8  \n",
       "\n",
       "[61214 rows x 28 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train_original"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "df3e2483",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-23T07:47:54.159804Z",
     "iopub.status.busy": "2024-06-23T07:47:54.159398Z",
     "iopub.status.idle": "2024-06-23T07:47:54.165129Z",
     "shell.execute_reply": "2024-06-23T07:47:54.163932Z"
    },
    "papermill": {
     "duration": 0.015379,
     "end_time": "2024-06-23T07:47:54.167788",
     "exception": false,
     "start_time": "2024-06-23T07:47:54.152409",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#model = DecisionTreeClassifier()   Not Recommended\n",
    "#model=DecisionTreeClassifier(random_state=42)    Not Recommended\n",
    "#model = LogisticRegression(solver='liblinear')\n",
    "model = LogisticRegression(solver='newton-cg')   #so far best 8162\n",
    "#model = LogisticRegression(solver='saga',max_iter=3000)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "bd8bda7d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-23T07:47:54.181489Z",
     "iopub.status.busy": "2024-06-23T07:47:54.181058Z",
     "iopub.status.idle": "2024-06-23T07:48:21.036915Z",
     "shell.execute_reply": "2024-06-23T07:48:21.035428Z"
    },
    "papermill": {
     "duration": 26.86708,
     "end_time": "2024-06-23T07:48:21.040877",
     "exception": false,
     "start_time": "2024-06-23T07:47:54.173797",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(solver=&#x27;newton-cg&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(solver=&#x27;newton-cg&#x27;)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LogisticRegression(solver='newton-cg')"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Reshape y_train to a 1D array\n",
    "y_train = np.ravel(y_train)\n",
    "\n",
    "#training the model\n",
    "model.fit(X_train,y_train)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "925e52e9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-23T07:48:21.069878Z",
     "iopub.status.busy": "2024-06-23T07:48:21.069243Z",
     "iopub.status.idle": "2024-06-23T07:48:21.099218Z",
     "shell.execute_reply": "2024-06-23T07:48:21.097745Z"
    },
    "papermill": {
     "duration": 0.049354,
     "end_time": "2024-06-23T07:48:21.103556",
     "exception": false,
     "start_time": "2024-06-23T07:48:21.054202",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.816257187663356\n"
     ]
    }
   ],
   "source": [
    "# Predicting the values on the basis of sample\n",
    "prediction=model.predict(X_test)\n",
    "\n",
    "\n",
    "mae = mean_absolute_error(y_test, prediction)\n",
    "mse = mean_squared_error(y_test, prediction)\n",
    "rmse = mean_squared_error(y_test, prediction, squared=False)  # Compute RMSE from MSE\n",
    "r2 = r2_score(y_test, prediction)\n",
    "\n",
    "'''print(\"Mean Absolute Error (MAE):\", mae)\n",
    "print(\"Mean Squared Error (MSE):\", mse)\n",
    "print(\"Root Mean Squared Error (RMSE):\", rmse)\n",
    "print(\"R-squared (R²) Score:\", r2)\n",
    "'''\n",
    "\n",
    "# Evaluate the performance of the classifier ( this is used to identify the Accuracy of Classification Model)\n",
    "accuracy = accuracy_score(y_test, prediction)\n",
    "print(\"Accuracy:\", accuracy)\n",
    "\n",
    "\n",
    "\n",
    "# Mean Absolute Error (MAE): 0.01583093808988759\n",
    "# Mean Squared Error (MSE): 0.00040186552736870556\n",
    "# Root Mean Squared Error (RMSE): 0.020046583932648115\n",
    "# R-squared (R²) Score: 0.8457744976398425\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "92257e9e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-23T07:48:21.134382Z",
     "iopub.status.busy": "2024-06-23T07:48:21.133729Z",
     "iopub.status.idle": "2024-06-23T07:48:21.711434Z",
     "shell.execute_reply": "2024-06-23T07:48:21.710404Z"
    },
    "papermill": {
     "duration": 0.596727,
     "end_time": "2024-06-23T07:48:21.714098",
     "exception": false,
     "start_time": "2024-06-23T07:48:21.117371",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Getting Column Names from Original Input dataframe and extractingn the same columns from polynomial array \n",
    "\n",
    "# Get feature names for the polynomial features\n",
    "feature_names = X_train_original.columns\n",
    "\n",
    "# Create a DataFrame for polynomial features to easily identify the original features\n",
    "input_df = pd.DataFrame(X_test_original, columns=feature_names)\n",
    "\n",
    "# Create a DataFrame for output data ( this dataframe will further be concatenated with Prediction so that accurace of the model could be gauged)\n",
    "output_df = pd.DataFrame(y_test_original, columns=['Target'])  # Replace with appropriate column name\n",
    "output_df.rename(columns={'Target': 'Target_test'}, inplace=True)\n",
    "\n",
    "# Create a DataFrame for prediction results\n",
    "prediction_df = pd.DataFrame(prediction, columns=['Target_Predicted'])  # Assuming prediction is a 1D array\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "#writing output in CSV for further asessment \n",
    "\n",
    "input_df.to_csv('/kaggle/working/input.csv', index=False)\n",
    "output_df.to_csv('/kaggle/working/output.csv', index=False)\n",
    "prediction_df.to_csv('/kaggle/working/Prediction.csv', index=False)\n",
    "\n",
    "\n",
    "df_input_csv= pd.read_csv('/kaggle/working/input.csv')\n",
    "df_output_csv= pd.read_csv('/kaggle/working/output.csv')\n",
    "df_prediction_csv= pd.read_csv('/kaggle/working/Prediction.csv')\n",
    "\n",
    "\n",
    "# Concatenate input, output, and prediction DataFrames along the columns axis\n",
    "combined_df = pd.concat([df_input_csv, df_output_csv,df_prediction_csv], axis=1)\n",
    "\n",
    "\n",
    "\n",
    "combined_df.to_csv('/kaggle/working/final.csv', index=False)\n",
    "\n",
    "\n",
    "import os\n",
    "os.remove('/kaggle/working/input.csv')\n",
    "os.remove('/kaggle/working/output.csv')\n",
    "os.remove('/kaggle/working/Prediction.csv')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "2c714d92",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-23T07:48:21.729013Z",
     "iopub.status.busy": "2024-06-23T07:48:21.728347Z",
     "iopub.status.idle": "2024-06-23T07:48:23.538673Z",
     "shell.execute_reply": "2024-06-23T07:48:23.537365Z"
    },
    "papermill": {
     "duration": 1.820826,
     "end_time": "2024-06-23T07:48:23.541530",
     "exception": false,
     "start_time": "2024-06-23T07:48:21.720704",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#producing Results for Submission to Kagal on Kagal provided files\n",
    "\n",
    "# importing CSV with training data\n",
    "file_path = '/kaggle/input/playground-series-s4e6/test.csv'\n",
    "\n",
    "df22=pd.read_csv(file_path)\n",
    "\n",
    "#df22.to_csv('/kaggle/working/test_Copy.csv', index=False)\n",
    "\n",
    "#defining input and output dataframes\n",
    "Xa=df22.copy()\n",
    "Xa_Original=Xa\n",
    "\n",
    "\n",
    "colname = ['Previous qualification','Previous qualification (grade)','Debtor','Tuition fees up to date','Gender','Scholarship holder','Age at enrollment','Nacionality','Mother\\'s qualification','Father\\'s qualification','Mother\\'s occupation','Father\\'s occupation','Educational special needs','International','Curricular units 1st sem (credited)','Curricular units 1st sem (enrolled)','Curricular units 1st sem (evaluations)','Curricular units 1st sem (approved)','Curricular units 1st sem (grade)','Curricular units 1st sem (without evaluations)','Curricular units 2nd sem (credited)','Curricular units 2nd sem (enrolled)','Curricular units 2nd sem (evaluations)','Curricular units 2nd sem (approved)','Curricular units 2nd sem (grade)','Curricular units 2nd sem (without evaluations)','Unemployment rate']\n",
    "\n",
    "\n",
    "# Create a DataFrame for polynomial features to easily identify the original features\n",
    "Xa = pd.DataFrame(Xa, columns=colname)\n",
    "\n",
    "\n",
    "#predicting results\n",
    "prediction_submission=model.predict(Xa)\n",
    "\n",
    "# Create a DataFrame for prediction results\n",
    "prediction_df_final = pd.DataFrame(prediction_submission, columns=['Target'])  # Assuming prediction is a 1D array\n",
    "\n",
    "y_distionary_revert={ 1 : 'Graduate' , 2 : 'Dropout' , 3: 'Enrolled' }\n",
    "\n",
    "prediction_df_final=prediction_df_final['Target'].replace(y_distionary_revert)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "prediction_df_final.to_csv('/kaggle/working/prediction_on_test_data.csv', index=False)\n",
    "\n",
    "\n",
    "# Create a DataFrame for input data\n",
    "\n",
    "# Get feature names for the polynomial features\n",
    "feature_names = Xa_Original.columns\n",
    "\n",
    "# Create a DataFrame for polynomial features to easily identify the original features\n",
    "input_df = pd.DataFrame(Xa_Original, columns=feature_names)\n",
    "\n",
    "\n",
    "#input_df = pd.DataFrame(Xa, columns=Xa.columns.tolist())  # Replace with appropriate column names\n",
    "\n",
    "input_df.to_csv('/kaggle/working/input_of_test_data.csv', index=False)\n",
    "\n",
    "\n",
    "df_input_csv_fin= pd.read_csv('/kaggle/working/input_of_test_data.csv')\n",
    "df_output_csv_fin= pd.read_csv('/kaggle/working/prediction_on_test_data.csv')\n",
    "\n",
    "df_input_csv_fin=df_input_csv_fin[['id']]\n",
    "# Concatenate input, output, and prediction DataFrames along the columns axis\n",
    "combined_df_fin = pd.concat([df_input_csv_fin, df_output_csv_fin], axis=1)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "combined_df_fin.to_csv('/kaggle/working/submission.csv', index=False)\n",
    "\n",
    "os.remove('/kaggle/working/input_of_test_data.csv')\n",
    "\n",
    "os.remove('/kaggle/working/prediction_on_test_data.csv')\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6a04b42f",
   "metadata": {
    "papermill": {
     "duration": 0.006329,
     "end_time": "2024-06-23T07:48:23.554708",
     "exception": false,
     "start_time": "2024-06-23T07:48:23.548379",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 8710574,
     "sourceId": 73290,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30698,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 36.798258,
   "end_time": "2024-06-23T07:48:24.182823",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-06-23T07:47:47.384565",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
